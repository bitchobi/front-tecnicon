<template>
  <div class="dashboard-container">
    <!-- Header con navegaci√≥n -->
    <div class="dashboard-header">
      <div class="header-content">
        <button @click="$router.go(-1)" class="back-btn">
          <span>‚Üê</span>
          <span>Volver</span>
        </button>
        <h1 class="dashboard-title">Dashboard de Obra</h1>
        <div class="header-actions">
          <button @click="refreshData" class="refresh-btn" :disabled="loading">
            <span>üîÑ</span>
            <span>{{ loading ? "Actualizando..." : "Actualizar" }}</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Estad√≠sticas r√°pidas -->
    <div class="stats-grid" v-if="stats">
      <div class="stat-card">
        <div class="stat-icon">üë•</div>
        <div class="stat-content">
          <h3>Total Operadores</h3>
          <p class="stat-value">{{ operadores.length }}</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">üí∞</div>
        <div class="stat-content">
          <h3>Presupuesto Total</h3>
          <p class="stat-value">{{ formatNumber(stats.presupuestoTotal) }}</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">üí∏</div>
        <div class="stat-content">
          <h3>Total Gastado</h3>
          <p class="stat-value">{{ formatNumber(stats.totalGastado) }}</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">üìä</div>
        <div class="stat-content">
          <h3>Promedio Consumo</h3>
          <p class="stat-value">{{ stats.promedioConsumo }}%</p>
        </div>
      </div>
    </div>

    <!-- Controles de exportaci√≥n -->
    <div class="export-controls">
      <button
        @click="exportExcel"
        class="export-btn excel"
        :disabled="!operadores.length"
      >
        <span>üìä</span>
        <span>Exportar Excel</span>
      </button>
      <button
        @click="exportPDF"
        class="export-btn pdf"
        :disabled="!operadores.length"
      >
        <span>üìÑ</span>
        <span>Exportar PDF</span>
      </button>
    </div>

    <!-- Mensaje de carga -->
    <div v-if="loading" class="loading-message">
      <div class="spinner"></div>
      <p>Cargando datos del dashboard...</p>
    </div>

    <!-- Mensaje de error -->
    <div v-if="error" class="error-message">
      <div class="error-icon">‚ö†Ô∏è</div>
      <p>{{ error }}</p>
      <button @click="fetchDashboard" class="retry-btn">Reintentar</button>
    </div>

    <!-- Tabla de operadores -->
    <div v-if="operadores.length && !loading" class="table-container">
      <table class="dashboard-table">
        <thead>
          <tr>
            <th class="text-left">Operador</th>
            <th class="text-right">Presupuesto Total</th>
            <th class="text-right">Total Gastado</th>
            <th class="text-center">Consumo (%)</th>
            <th class="text-center">Estado</th>
            <th class="text-center">Acciones</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="op in operadores" :key="op.id_operador" class="table-row">
            <td class="operador-cell">
              <div class="operador-info">
                <div class="operador-avatar">
                  {{ op.operador.charAt(0).toUpperCase() }}
                </div>
                <span class="operador-name">{{ op.operador }}</span>
              </div>
            </td>
            <td class="text-right">
              <span class="amount">{{
                formatNumber(op.presupuesto_total)
              }}</span>
            </td>
            <td class="text-right">
              <span class="amount">{{ formatNumber(op.total_gastado) }}</span>
            </td>
            <td class="text-center">
              <div class="progress-container">
                <div class="progress-bar">
                  <div
                    class="progress-fill"
                    :style="{
                      width: `${Math.min(op.porcentaje_consumido, 100)}%`,
                    }"
                    :class="getProgressClass(op.porcentaje_consumido)"
                  ></div>
                </div>
                <span class="progress-text"
                  >{{ op.porcentaje_consumido }}%</span
                >
              </div>
            </td>
            <td class="text-center">
              <div class="status-indicator">
                <span
                  class="status-dot"
                  :class="getSemaforoClass(op.color_semaforo)"
                  :title="getSemaforoTitle(op.color_semaforo)"
                ></span>
                <span class="status-label">{{
                  getSemaforoLabel(op.color_semaforo)
                }}</span>
              </div>
            </td>
            <td class="text-center">
              <div class="action-buttons">
                <button
                  @click="viewDetails(op)"
                  class="action-btn view"
                  title="Ver detalles"
                >
                  üëÅÔ∏è
                </button>
                <button
                  @click="viewExpenses(op)"
                  class="action-btn expenses"
                  title="Ver gastos"
                >
                  üí∏
                </button>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Mensaje vac√≠o -->
    <div v-if="!operadores.length && !loading && !error" class="empty-message">
      <div class="empty-icon">üìä</div>
      <p>No hay datos de operadores disponibles</p>
      <button @click="fetchDashboard" class="retry-btn">Recargar datos</button>
    </div>

    <!-- Modal de detalles -->
    <div v-if="showModal" class="modal-overlay" @click="closeModal">
      <div class="modal-content" @click.stop>
        <div class="modal-header">
          <h3>Detalles del Operador</h3>
          <button @click="closeModal" class="modal-close">‚úï</button>
        </div>
        <div class="modal-body" v-if="selectedOperator">
          <div class="detail-row">
            <span class="detail-label">Operador:</span>
            <span class="detail-value">{{ selectedOperator.operador }}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Presupuesto Total:</span>
            <span class="detail-value">{{
              formatNumber(selectedOperator.presupuesto_total)
            }}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Total Gastado:</span>
            <span class="detail-value">{{
              formatNumber(selectedOperator.total_gastado)
            }}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Disponible:</span>
            <span class="detail-value available">{{
              formatNumber(
                selectedOperator.presupuesto_total -
                  selectedOperator.total_gastado
              )
            }}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">Porcentaje Consumido:</span>
            <span class="detail-value"
              >{{ selectedOperator.porcentaje_consumido }}%</span
            >
          </div>
          <div class="detail-row">
            <span class="detail-label">Estado:</span>
            <div class="status-indicator">
              <span
                class="status-dot"
                :class="getSemaforoClass(selectedOperator.color_semaforo)"
              ></span>
              <span>{{
                getSemaforoLabel(selectedOperator.color_semaforo)
              }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from "vue";
import { useRouter } from "vue-router";
import { getToken } from "../utils/auth.js";

const router = useRouter();
const operadores = ref([]);
const loading = ref(false);
const error = ref("");
const showModal = ref(false);
const selectedOperator = ref(null);

const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:3000";

const stats = computed(() => {
  if (!operadores.value.length) return null;

  const presupuestoTotal = operadores.value.reduce(
    (sum, op) => sum + (op.presupuesto_total || 0),
    0
  );
  const totalGastado = operadores.value.reduce(
    (sum, op) => sum + (op.total_gastado || 0),
    0
  );
  const promedioConsumo = Math.round(
    operadores.value.reduce(
      (sum, op) => sum + (op.porcentaje_consumido || 0),
      0
    ) / operadores.value.length
  );

  return {
    presupuestoTotal,
    totalGastado,
    promedioConsumo,
  };
});

onMounted(() => {
  fetchDashboard();
});

async function fetchDashboard() {
  loading.value = true;
  error.value = "";

  try {
    const token = getToken();
    if (!token) {
      router.push("/login");
      return;
    }

    const response = await fetch(`${API_BASE}/dashboard/resumen/1`, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${response.statusText}`);
    }

    operadores.value = await response.json();
  } catch (err) {
    error.value = err.message || "Error al cargar los datos del dashboard";
    console.error("Error fetching dashboard:", err);
  } finally {
    loading.value = false;
  }
}

function refreshData() {
  fetchDashboard();
}

function formatNumber(num) {
  return new Intl.NumberFormat("es-PY", {
    style: "currency",
    currency: "PYG",
    minimumFractionDigits: 0,
  }).format(num || 0);
}

function getProgressClass(percentage) {
  if (percentage >= 90) return "danger";
  if (percentage >= 75) return "warning";
  if (percentage >= 50) return "caution";
  return "success";
}

function getSemaforoClass(color) {
  const classes = {
    verde: "status-green",
    amarillo: "status-yellow",
    naranja: "status-orange",
    rojo: "status-red",
    gris: "status-gray",
  };
  return classes[color] || "status-gray";
}

function getSemaforoLabel(color) {
  const labels = {
    verde: "√ìptimo",
    amarillo: "Precauci√≥n",
    naranja: "Alerta",
    rojo: "Cr√≠tico",
    gris: "Sin datos",
  };
  return labels[color] || "Desconocido";
}

function getSemaforoTitle(color) {
  const titles = {
    verde: "Estado √≥ptimo - Consumo bajo control",
    amarillo: "Precauci√≥n - Revisar gastos",
    naranja: "Alerta - Consumo elevado",
    rojo: "Cr√≠tico - Presupuesto agotado o superado",
    gris: "Sin datos suficientes",
  };
  return titles[color] || "Estado desconocido";
}

function viewDetails(operador) {
  selectedOperator.value = operador;
  showModal.value = true;
}

function viewExpenses(operador) {
  // Navegar a gastos con filtro por operador
  router.push(`/gastos?operador=${operador.id_operador}`);
}

function closeModal() {
  showModal.value = false;
  selectedOperator.value = null;
}

function exportExcel() {
  try {
    const token = getToken();
    const url = `${API_BASE}/dashboard/resumen/1/excel?token=${token}`;
    window.open(url, "_blank");
  } catch (err) {
    console.error("Error exporting Excel:", err);
    alert("Error al exportar a Excel");
  }
}

function exportPDF() {
  try {
    const token = getToken();
    const url = `${API_BASE}/dashboard/resumen/1/pdf?token=${token}`;
    window.open(url, "_blank");
  } catch (err) {
    console.error("Error exporting PDF:", err);
    alert("Error al exportar a PDF");
  }
}
</template>
</script>

<style scoped>
.dashboard-container {
  min-height: 100vh;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  padding: 20px;
}

.dashboard-header {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  margin-bottom: 24px;
  overflow: hidden;
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px 32px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.back-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 10px 16px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 14px;
}

.back-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateX(-2px);
}

.dashboard-title {
  font-size: 28px;
  font-weight: 700;
  margin: 0;
  text-align: center;
  flex: 1;
}

.header-actions {
  display: flex;
  gap: 12px;
}

.refresh-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 10px 16px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 14px;
}

.refresh-btn:hover:not(:disabled) {
  background: rgba(255, 255, 255, 0.3);
}

.refresh-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 32px;
}

.stat-card {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  gap: 20px;
  transition: transform 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-4px);
}

.stat-icon {
  font-size: 32px;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  color: white;
}

.stat-content h3 {
  margin: 0 0 8px 0;
  font-size: 14px;
  color: #64748b;
  font-weight: 600;
}

.stat-value {
  margin: 0;
  font-size: 24px;
  font-weight: 700;
  color: #1e293b;
}

.export-controls {
  display: flex;
  gap: 16px;
  justify-content: center;
  margin-bottom: 32px;
}

.export-btn {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 24px;
  border-radius: 12px;
  border: none;
  cursor: pointer;
  font-size: 16px;
  font-weight: 600;
  transition: all 0.3s ease;
  color: white;
}

.export-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.export-btn.excel {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
}

.export-btn.excel:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
}

.export-btn.pdf {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
}

.export-btn.pdf:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
}

.loading-message {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.spinner {
  width: 40px;
  height: 40px;
  margin: 0 auto 20px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.error-message,
.empty-message {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.error-icon,
.empty-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.retry-btn {
  background: #667eea;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  margin-top: 16px;
  transition: background 0.3s ease;
}

.retry-btn:hover {
  background: #5a67d8;
}

.table-container {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.dashboard-table {
  width: 100%;
  border-collapse: collapse;
}

.dashboard-table th {
  background: #f8fafc;
  padding: 20px 16px;
  font-weight: 600;
  color: #374151;
  border-bottom: 2px solid #e5e7eb;
}

.table-row {
  transition: background-color 0.2s ease;
}

.table-row:hover {
  background: #f8fafc;
}

.dashboard-table td {
  padding: 20px 16px;
  border-bottom: 1px solid #e5e7eb;
  vertical-align: middle;
}

.operador-cell {
  min-width: 200px;
}

.operador-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.operador-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 16px;
}

.operador-name {
  font-weight: 600;
  color: #1e293b;
}

.amount {
  font-weight: 600;
  color: #059669;
}

.progress-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
}

.progress-bar {
  width: 100px;
  height: 8px;
  background: #e5e7eb;
  border-radius: 4px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  border-radius: 4px;
  transition: width 0.3s ease;
}

.progress-fill.success {
  background: linear-gradient(90deg, #10b981, #059669);
}

.progress-fill.caution {
  background: linear-gradient(90deg, #f59e0b, #d97706);
}

.progress-fill.warning {
  background: linear-gradient(90deg, #f97316, #ea580c);
}

.progress-fill.danger {
  background: linear-gradient(90deg, #ef4444, #dc2626);
}

.progress-text {
  font-size: 12px;
  font-weight: 600;
  color: #374151;
}

.status-indicator {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
}

.status-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  border: 2px solid white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.status-dot.status-green {
  background: #10b981;
}

.status-dot.status-yellow {
  background: #f59e0b;
}

.status-dot.status-orange {
  background: #f97316;
}

.status-dot.status-red {
  background: #ef4444;
}

.status-dot.status-gray {
  background: #6b7280;
}

.status-label {
  font-size: 12px;
  font-weight: 600;
  color: #374151;
}

.action-buttons {
  display: flex;
  gap: 8px;
  justify-content: center;
}

.action-btn {
  width: 32px;
  height: 32px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.action-btn.view {
  background: #e0e7ff;
  color: #3730a3;
}

.action-btn.view:hover {
  background: #c7d2fe;
}

.action-btn.expenses {
  background: #fef3c7;
  color: #92400e;
}

.action-btn.expenses:hover {
  background: #fde68a;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
}

.modal-content {
  background: white;
  border-radius: 16px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  max-width: 500px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px;
  border-bottom: 1px solid #e5e7eb;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 16px 16px 0 0;
}

.modal-header h3 {
  margin: 0;
  font-size: 20px;
  font-weight: 600;
}

.modal-close {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 16px;
  transition: background 0.2s ease;
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.3);
}

.modal-body {
  padding: 24px;
}

.detail-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid #f3f4f6;
}

.detail-row:last-child {
  border-bottom: none;
}

.detail-label {
  font-weight: 600;
  color: #374151;
}

.detail-value {
  color: #1f2937;
  font-weight: 500;
}

.detail-value.available {
  color: #059669;
  font-weight: 700;
}

@media (max-width: 768px) {
  .dashboard-container {
    padding: 16px;
  }

  .header-content {
    padding: 20px;
    flex-direction: column;
    gap: 16px;
  }

  .dashboard-title {
    font-size: 24px;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .export-controls {
    flex-direction: column;
    align-items: center;
  }

  .table-container {
    overflow-x: auto;
  }

  .dashboard-table {
    min-width: 800px;
  }
}
